pipeline { 
 agent any
 stages {
    stage('Fetch code') {
        steps {
            git branch: 'vp-rem', url: 'https://github.com/582Bamfo/vprofile-project.git'
    }
 }
 stage('build'){
    steps {
        sh 'mvn clean install -DskipTests'
    }
    post{
        success{
             echo 'Now Archiving...'
                    archiveArtifacts artifacts: '**/target/*.war'
        }
    }
 }
 stage('Test'){
    steps {
        sh 'mvn test'
    }
 }	
 stage ('CODE ANALYSIS WITH CHECKSTYLE'){
    steps {
     sh 'mvn checkstyle:checkstyle'
         }
   }
 stage('CODE ANALYSIS with SONARQUBE') {
            environment {
             scannerHome = tool 'sonar 4.7'
            }
            steps {
                withSonarQubeEnv('sonar') {
                    sh '''${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=vprofile \
                   -Dsonar.projectName=vprofile \
                   -Dsonar.projectVersion=1.0 \
                   -Dsonar.sources=src/ \
                   -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ \
                   -Dsonar.junit.reportsPath=target/surefire-reports/ \
                   -Dsonar.jacoco.reportsPath=target/jacoco.exec \
                   -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml'''
                }
            }
 }
  stage("Quality Gate") {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    // Parameter indicates whether to set pipeline to UNSTABLE if Quality Gate fails
                    // true = set pipeline to UNSTABLE, false = don't
                    waitForQualityGate abortPipeline: true
                }
            }
}
}
}